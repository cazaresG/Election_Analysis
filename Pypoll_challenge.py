{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Election Results\n",
      "-------------------------\n",
      "Total Votes: 369,711\n",
      "-------------------------\n",
      "Charles Casper Stockham: 23.0% (85,213)\n",
      "\n",
      "Diana DeGette: 73.8% (272,892)\n",
      "\n",
      "Raymon Anthony Doane: 3.1% (11,606)\n",
      "\n",
      "Jefferson: 10.5% (38,855)\n",
      "\n",
      "Denver: 82.8% (306,055)\n",
      "\n",
      "Arapahoe: 6.7% (24,801)\n",
      "\n",
      "-------------------------\n",
      "Winner: Raymon Anthony Doane\n",
      "Winning Vote Count: 38,855\n",
      "Winning Percentage: 10.5%\n",
      "-------------------------\n",
      "\n",
      "Largest County Turnout: Jefferson\n",
      "-------------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# -*- coding: UTF-8 -*-\n",
    "\"\"\"PyPoll Homework Challenge Solution.\"\"\"\n",
    "import csv\n",
    "import os\n",
    "# Assign a variable for the file to load and the path.\n",
    "file_to_load = os.path.join(\"Resources\", \"election_results.csv\")\n",
    "# Create a filename variable to a direct or indirect path to the file.\n",
    "file_to_save = os.path.join(\"analysis\", \"election_analysis.txt\")\n",
    "\n",
    "# 1. Initialize a total vote counter.\n",
    "total_votes = 0\n",
    "# Candidate Options\n",
    "candidate_options = []\n",
    "# Declare the empty dictionary.\n",
    "candidate_votes = {}\n",
    "# Initialize a county list ------------------------------------ 1 \n",
    "county_list = []\n",
    "# Initialize a county dictionary (county key & votes) --------- 1\n",
    "county_votes = {}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Winning Candidate and Winning Count Tracker\n",
    "winning_candidate = \"\"\n",
    "winning_count = 0\n",
    "winning_percentage = 0\n",
    "#Winning county empty string--------------------------------  2\n",
    "county_largest_turnout = 0\n",
    "\n",
    "\n",
    "# Open the election results and read the file.\n",
    "with open(file_to_load) as election_data:\n",
    "    file_reader = csv.reader(election_data)\n",
    "   # Read and print the header row.\n",
    "    headers = next(file_reader)\n",
    "    # Print each row in the CSV file.\n",
    "    for row in file_reader:\n",
    "        # 2. Add to the total vote count.\n",
    "        total_votes += 1\n",
    "#print(total_votes)\n",
    "\n",
    "\n",
    "# Print the candidate name from each row.\n",
    "        candidate_name = row[2]\n",
    "#Print county name for each row-----------------------------------  3\n",
    "        county_name = row[1]\n",
    "# If the candidate does not match any existing candidate...\n",
    "        if candidate_name not in candidate_options:\n",
    "    # Add it to the list of candidates.\n",
    "           candidate_options.append(candidate_name)\n",
    "            # 2. Begin tracking that candidate's vote count.\n",
    "           candidate_votes[candidate_name] = 0\n",
    "            # 2. Begin tracking that candidate's vote count.\n",
    "        candidate_votes[candidate_name] += 1\n",
    "\n",
    "#Decision Statement ----------------------------------------------\n",
    "        if county_name not in county_list: #---------------------- 4a\n",
    "           county_list.append(county_name) #---------------------- 4b\n",
    "           county_votes[county_name] = 0 #------------------------ 4c\n",
    "        county_votes[county_name] += 1 #-------------------------- 5\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#Using the with statement open the file as a text file.\n",
    "with open(file_to_save, \"w\") as txt_file:\n",
    "\n",
    "         # Print the final vote count to the terminal.\n",
    "    election_results = (\n",
    "        f\"\\nElection Results\\n\"\n",
    "        f\"-------------------------\\n\"\n",
    "        f\"Total Votes: {total_votes:,}\\n\"\n",
    "        f\"-------------------------\\n\")\n",
    "    print(election_results, end=\"\")\n",
    "# Save the final vote count to the text file.\n",
    "    txt_file.write(election_results)\n",
    "\n",
    "\n",
    "\n",
    "# Determine the percentage of votes for each candidate by looping through the counts.\n",
    "# 1. Iterate through the candidate list.\n",
    "    for candidate_name in candidate_votes:\n",
    "    # 2. Retrieve vote count of a candidate.\n",
    "        votes = candidate_votes[candidate_name]\n",
    "    # 3. Calculate the percentage of votes.\n",
    "        vote_percentage = float(votes) / float(total_votes) * 100\n",
    "    # 4. Print the candidate name and percentage of votes.\n",
    "        candidate_results = (\n",
    "        f\"{candidate_name}: {vote_percentage:.1f}% ({votes:,})\\n\")\n",
    "        print(candidate_results)\n",
    "        #  Save the candidate results to our text file.\n",
    "        txt_file.write(candidate_results)\n",
    "\n",
    "\n",
    "\n",
    "    for county_name in county_votes: #--------------------------------------------------- 6a\n",
    "        votes2 = county_votes[county_name] #----------------------------------------6b\n",
    "        county_vote_percentage = float(votes2) / float(total_votes) * 100 #--------6c\n",
    "        county_results = (\n",
    "        f\"{county_name}: {county_vote_percentage:.1f}% ({votes2:,})\\n\") #----------6d\n",
    "        print(county_results)\n",
    "        txt_file.write(county_results)\n",
    "\n",
    "\n",
    "        if (votes > winning_count) and (vote_percentage > winning_percentage):\n",
    "         # If true then set winning_count = votes and winning_percent =\n",
    "         # vote_percentage.\n",
    "         winning_count = votes\n",
    "         winning_candidate = candidate_name\n",
    "         # And, set the winning_candidate equal to the candidate's name.\n",
    "         winning_percentage = vote_percentage\n",
    "\n",
    "\n",
    "#  Decision statement/ county with largest vote count  #----------------------------------6f\n",
    "         if (votes2 > winning_count) and (county_vote_percentage > winning_percentage):\n",
    "          winning_count = votes2\n",
    "          county_largest_turnout = county_name\n",
    "          winning_percentage = county_vote_percentage\n",
    "\n",
    "    winning_candidate_summary = (\n",
    "        f\"-------------------------\\n\"\n",
    "        f\"Winner: {winning_candidate}\\n\"\n",
    "        f\"Winning Vote Count: {winning_count:,}\\n\"\n",
    "        f\"Winning Percentage: {winning_percentage:.1f}%\\n\"\n",
    "        f\"-------------------------\\n\")\n",
    "    print(winning_candidate_summary)\n",
    "    # Save the winning candidate's results to the text file.\n",
    "    txt_file.write(winning_candidate_summary)\n",
    "\n",
    "    winning_county_summary = (   #----------------------------------------------------7\n",
    "        f\"Largest County Turnout: {county_largest_turnout}\\n\"\n",
    "        f\"-------------------------\\n\")\n",
    "    print(winning_county_summary)\n",
    "    # Save the winning candidate's results to the text file.\n",
    "    txt_file.write(winning_county_summary)\n",
    "    \n",
    "\n",
    "# Print each candidate, their voter count, and percentage to the terminal.\n",
    "#print(candidate_results)\n",
    "\n",
    "\n",
    "#print(candidate_votes)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.12 ('base')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "75a259115848ffb41537c4627e352d128556ccee24e0d125f830bb294f964be1"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
